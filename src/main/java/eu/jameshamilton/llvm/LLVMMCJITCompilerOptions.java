// Generated by jextract

package eu.jameshamilton.llvm;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct LLVMMCJITCompilerOptions {
 *     unsigned int OptLevel;
 *     LLVMCodeModel CodeModel;
 *     LLVMBool NoFramePointerElim;
 *     LLVMBool EnableFastISel;
 *     LLVMMCJITMemoryManagerRef MCJMM;
 * }
 * }
 */
public class LLVMMCJITCompilerOptions {

    LLVMMCJITCompilerOptions() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        LLVM.C_INT.withName("OptLevel"),
        LLVM.C_INT.withName("CodeModel"),
        LLVM.C_INT.withName("NoFramePointerElim"),
        LLVM.C_INT.withName("EnableFastISel"),
        LLVM.C_POINTER.withName("MCJMM")
    ).withName("LLVMMCJITCompilerOptions");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt OptLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OptLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int OptLevel
     * }
     */
    public static final OfInt OptLevel$layout() {
        return OptLevel$LAYOUT;
    }

    private static final long OptLevel$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int OptLevel
     * }
     */
    public static final long OptLevel$offset() {
        return OptLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int OptLevel
     * }
     */
    public static int OptLevel(MemorySegment struct) {
        return struct.get(OptLevel$LAYOUT, OptLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int OptLevel
     * }
     */
    public static void OptLevel(MemorySegment struct, int fieldValue) {
        struct.set(OptLevel$LAYOUT, OptLevel$OFFSET, fieldValue);
    }

    private static final OfInt CodeModel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CodeModel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LLVMCodeModel CodeModel
     * }
     */
    public static final OfInt CodeModel$layout() {
        return CodeModel$LAYOUT;
    }

    private static final long CodeModel$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LLVMCodeModel CodeModel
     * }
     */
    public static final long CodeModel$offset() {
        return CodeModel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LLVMCodeModel CodeModel
     * }
     */
    public static int CodeModel(MemorySegment struct) {
        return struct.get(CodeModel$LAYOUT, CodeModel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LLVMCodeModel CodeModel
     * }
     */
    public static void CodeModel(MemorySegment struct, int fieldValue) {
        struct.set(CodeModel$LAYOUT, CodeModel$OFFSET, fieldValue);
    }

    private static final OfInt NoFramePointerElim$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NoFramePointerElim"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LLVMBool NoFramePointerElim
     * }
     */
    public static final OfInt NoFramePointerElim$layout() {
        return NoFramePointerElim$LAYOUT;
    }

    private static final long NoFramePointerElim$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LLVMBool NoFramePointerElim
     * }
     */
    public static final long NoFramePointerElim$offset() {
        return NoFramePointerElim$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LLVMBool NoFramePointerElim
     * }
     */
    public static int NoFramePointerElim(MemorySegment struct) {
        return struct.get(NoFramePointerElim$LAYOUT, NoFramePointerElim$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LLVMBool NoFramePointerElim
     * }
     */
    public static void NoFramePointerElim(MemorySegment struct, int fieldValue) {
        struct.set(NoFramePointerElim$LAYOUT, NoFramePointerElim$OFFSET, fieldValue);
    }

    private static final OfInt EnableFastISel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("EnableFastISel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LLVMBool EnableFastISel
     * }
     */
    public static final OfInt EnableFastISel$layout() {
        return EnableFastISel$LAYOUT;
    }

    private static final long EnableFastISel$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LLVMBool EnableFastISel
     * }
     */
    public static final long EnableFastISel$offset() {
        return EnableFastISel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LLVMBool EnableFastISel
     * }
     */
    public static int EnableFastISel(MemorySegment struct) {
        return struct.get(EnableFastISel$LAYOUT, EnableFastISel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LLVMBool EnableFastISel
     * }
     */
    public static void EnableFastISel(MemorySegment struct, int fieldValue) {
        struct.set(EnableFastISel$LAYOUT, EnableFastISel$OFFSET, fieldValue);
    }

    private static final AddressLayout MCJMM$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("MCJMM"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LLVMMCJITMemoryManagerRef MCJMM
     * }
     */
    public static final AddressLayout MCJMM$layout() {
        return MCJMM$LAYOUT;
    }

    private static final long MCJMM$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LLVMMCJITMemoryManagerRef MCJMM
     * }
     */
    public static final long MCJMM$offset() {
        return MCJMM$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LLVMMCJITMemoryManagerRef MCJMM
     * }
     */
    public static MemorySegment MCJMM(MemorySegment struct) {
        return struct.get(MCJMM$LAYOUT, MCJMM$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LLVMMCJITMemoryManagerRef MCJMM
     * }
     */
    public static void MCJMM(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(MCJMM$LAYOUT, MCJMM$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

